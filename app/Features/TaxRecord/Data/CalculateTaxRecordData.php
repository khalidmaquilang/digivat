<?php

declare(strict_types=1);

namespace App\Features\TaxRecord\Data;

use App\Features\Shared\Helpers\MoneyHelper;
use App\Features\TaxRecord\Enums\CalculateTaxRecordModeEnum;
use App\Features\TaxRecord\Enums\CategoryTypeEnum;
use App\Features\TaxRecord\Enums\TaxRecordStatusEnum;
use App\Features\TaxRecordItem\Data\TaxRecordItemData;
use Carbon\Carbon;
use Spatie\LaravelData\Attributes\Validation\GreaterThanOrEqualTo;
use Spatie\LaravelData\Attributes\WithCast;
use Spatie\LaravelData\Casts\DateTimeInterfaceCast;
use Spatie\LaravelData\Data;
use Spatie\LaravelData\Optional;

/**
 * Tax Calculation Request Data
 *
 * This data class represents the request payload for calculating tax amounts on transactions.
 * It includes transaction details, items, and business category information required for
 * accurate Philippine tax calculations.
 *
 * @example {
 *   "mode": "preview",
 *   "category_type": "retail_goods",
 *   "transaction_reference": "TXN-2025-001234",
 *   "sales_date": "2025-08-16T07:42:00.000+00:00",
 *   "items": [
 *     {
 *       "name": "Premium Widget",
 *       "description": "High-quality premium widget with advanced features",
 *       "quantity": 2,
 *       "unit_price": 5000
 *     }
 *   ],
 *   "order_discount": 200
 * }
 */
class CalculateTaxRecordData extends Data
{
    public function __construct(
        /**
         * The calculation mode - determines if this is a preview or acknowledgment
         *
         * - preview: Calculate tax without creating a permanent record
         * - acknowledge: Calculate and create a permanent tax record
         *
         * @example "preview"
         */
        public CalculateTaxRecordModeEnum $mode,

        /**
         * The business category type for tax calculation
         *
         * Determines the applicable tax rates and regulations based on business category.
         * Common values include retail_goods, digital_streaming, professional_services, etc.
         *
         * @example "retail_goods"
         */
        public CategoryTypeEnum $category_type,

        /**
         * Unique transaction reference identifier
         *
         * A unique identifier for the transaction, typically generated by the client system.
         * Must be unique across all transactions for the user.
         *
         * @example "TXN-2025-001234"
         */
        public string $transaction_reference,

        /**
         * The date and time when the sale occurred
         *
         * Must be in ISO 8601 format with timezone information.
         * Used for determining applicable tax rates and compliance reporting.
         *
         * @example "2025-08-16T07:42:00.000+00:00"
         */
        #[WithCast(DateTimeInterfaceCast::class, format: 'Y-m-d\TH:i:s.uP')]
        public Carbon $sales_date,

        /**
         * Array of transaction items for tax calculation
         *
         * Each item must include name, description, quantity, and unit_price.
         * The total tax will be calculated based on all items combined.
         *
         * @var array<TaxRecordItemData>
         *
         * @example [
         *   {
         *     "name": "Premium Widget",
         *     "description": "High-quality premium widget with advanced features",
         *     "quantity": 2,
         *     "unit_price": 5000
         *   }
         * ]
         */
        public array $items,

        /**
         * Total discount amount applied to the order
         *
         * The discount amount in centavos (smallest currency unit).
         * Must be greater than or equal to 0. Discounts are applied before tax calculation.
         *
         * @example 200
         */
        #[GreaterThanOrEqualTo(0)]
        public float $order_discount = 0
    ) {}

    public function toTaxRecordData(
        string $user_id,
        float $gross_amount,
        float $taxable_amount,
        float $tax_amount,
        Carbon $valid_until,
    ): TaxRecordData {
        return new TaxRecordData(
            user_id: $user_id,
            sales_date: $this->sales_date,
            transaction_reference: $this->transaction_reference,
            gross_amount: $gross_amount,
            order_discount: $this->order_discount,
            taxable_amount: $taxable_amount,
            tax_amount: MoneyHelper::evaluate($tax_amount),
            status: $this->mode === CalculateTaxRecordModeEnum::Acknowledge ? TaxRecordStatusEnum::Acknowledged : TaxRecordStatusEnum::Preview,
            category_type: $this->category_type,
            bir_receipt_id: Optional::create(),
            valid_until: $valid_until,
        );
    }
}
